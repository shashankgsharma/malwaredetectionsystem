import asyncio
from fastapi import FastAPI, Request, BackgroundTasks, File, UploadFile
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import nest_asyncio
import uvicorn
import shutil
import os
import pickle
import pandas as pd

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Enable CORS for all origins
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="static"), name="static")

# Load model from pickle file
with open("classifier.pkl", "rb") as f:
    model = pickle.load(f)

# Define function to predict malware
def predict_malware(file_path):
    # Load log file
    df3 = pd.read_csv(file_path)
    df4 = df3.drop('hash', axis=1)

    # Make predictions
    malware_count = 0
    benign_count = 0
    predictions = model.predict(df4)
    for _ in predictions:
        if _ == 1:
            malware_count += 1
        else:
            benign_count += 1

    return malware_count, benign_count

async def process_file(file: UploadFile):
    # Save uploaded file
    with open(file.filename, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # Predict malware
    malware_count, benign_count = predict_malware(file.filename)

    # Delete uploaded file
    os.remove(file.filename)

    # Return results
    html_content = f"{malware_count}, {benign_count}"
    return html_content

# Define endpoint for file upload
@app.post("/uploadfile/")
async def create_upload_file(background_tasks: BackgroundTasks, file: UploadFile = File(...)):
    html_content = await asyncio.create_task(process_file(file))
    return HTMLResponse(content=html_content, status_code=200)

# Define endpoint for displaying the upload form
@app.get("/")
async def read_form(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

if __name__ == "__main__":
    nest_asyncio.apply()
    uvicorn.run(app, host="0.0.0.0", port=8080)
